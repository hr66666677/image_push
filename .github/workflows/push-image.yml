name: 自动检测并推送所有 Docker 镜像 tar 包
on:
  push:
    branches: [ main ]  # 监听 main 分支变动

jobs:
  auto-push-tar-images:
    runs-on: ubuntu-latest
    steps:
      # 1. 拉取仓库代码
      - name: 拉取代码
        uses: actions/checkout@v4

      # 2. 检测仓库中所有 .tar 文件（过滤 Docker 镜像包）
      - name: 扫描所有 Docker 镜像 tar 包
        id: list_tar_files
        run: |
          # 查找所有 .tar 文件，排除非镜像包（修复语法错误，移除多余多余括号）
          TAR_FILES=$(find . -type f -name "*.tar" -print | grep -v "non-image")
          echo "tar_files=$TAR_FILES" >> $GITHUB_OUTPUT
          # 打印找到的tar文件，方便调试
          echo "找到的tar文件: $TAR_FILES"

      # 3. 配置 Docker 环境（有 tar 包时才执行）
      - name: 加载 Docker 构建环境
        uses: docker/setup-buildx-action@v3
        if: steps.list_tar_files.outputs.tar_files != ''

      # 4. 登录 GitHub Packages（有 tar 包时才执行）
      - name: 登录镜像仓库
        uses: docker/login-action@v3
        if: steps.list_tar_files.outputs.tar_files != ''
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 5. 批量处理每个 tar 包：load → tag → push
      - name: 批量推送 tar 镜像包
        if: steps.list_tar_files.outputs.tar_files != ''
        run: |
          # 遍历所有 tar 文件
          for TAR_FILE in ${{ steps.list_tar_files.outputs.tar_files }}; do
            echo "=== 开始处理镜像包: $TAR_FILE ==="
            
            # 1. 加载 tar 包到本地
            echo "加载镜像包: $TAR_FILE"
            docker load -i $TAR_FILE || { echo "加载 $TAR_FILE 失败"; exit 1; }
            
            # 2. 获取加载后的镜像名（取第一个镜像）
            echo "获取加载后的镜像信息"
            IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1)
            echo "检测到镜像: $IMAGE_NAME"
            
            # 3. 打标签（适配 GitHub Packages 路径，使用tar文件名作为镜像名）
            BASE_NAME=$(basename "$TAR_FILE" .tar)
            NEW_TAG="ghcr.io/${{ github.repository_owner }}/$BASE_NAME:latest"
            echo "标记镜像为: $NEW_TAG"
            docker tag "$IMAGE_NAME" "$NEW_TAG" || { echo "标记镜像失败"; exit 1; }
            
            # 4. 推送镜像到 GitHub Packages
            echo "推送镜像到仓库: $NEW_TAG"
            docker push "$NEW_TAG" || { echo "推送 $NEW_TAG 失败"; exit 1; }
            
            echo "=== $TAR_FILE 推送完成 ==="
          done
